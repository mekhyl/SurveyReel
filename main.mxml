<?xml version="1.0" encoding="utf-8"?>
<mx:Application name="SurveyReel"
  xmlns:mx="http://www.adobe.com/2006/mxml"
  xmlns:s="library://ns.adobe.com/flex/spark"
  layout="vertical"
  verticalAlign="top"
  horizontalAlign="center"
  backgroundColor="white"
  paddingLeft="0"
  paddingRight="0"
  paddingTop="0"
  paddingBottom="0"
  width="100%"
  height="100%">
 
  <mx:Script>
    <![CDATA[
      import mx.controls.Alert;

      public var nc:NetConnection;
      public var ns:NetStream;
      public var camera:Camera;
      public var mic:Microphone;
      public var nsInComing:NetStream;
      public var nsOutGoing:NetStream;
      public var server:String = "rtmp://192.168.2.5/oflaDemo/test/";
      public var backend:String = "http://192.168.2.5/getquestion.php";
      public var recording:Boolean = false;
      public var currentQuestionNum:int;

      public var userId:String = "MikhilMasli";

      public var urlLoader:URLLoader;
     
      private function videoDisplay_creationComplete() :void
      {
        // Setup the NetConnection for streaming.
        this.nc = new NetConnection();
        this.nc.addEventListener(NetStatusEvent.NET_STATUS, 
                                 this.netStatusHandler, false, 0, true);
        this.nc.connect(this.server);

        // Setup the URLLoader for AJAX access.
        this.urlLoader = new URLLoader();
        this.urlLoader.dataFormat = URLLoaderDataFormat.VARIABLES;
        this.urlLoader.addEventListener(Event.COMPLETE, this.questionReceived);

        // Fetch the first question.
        this.currentQuestionNum = 0;
        this.getNextQuestion();
      }

      private function getNextQuestion() :void
      {
        var variables:URLVariables = new URLVariables();
        variables.q = 1 + this.currentQuestionNum;

        var req:URLRequest = new URLRequest();
        req.url = this.backend;
        req.method = URLRequestMethod.GET;
        req.data = variables;

        try {
          this.urlLoader.load(req);
        } catch (error:Error) {
          Alert.show("ERROR: Could not talk to backend at: " + this.backend);
        }
      }

      private function questionReceived(event:Event) :void
      {
        this.currentQuestionNum = event.target.data.qnum;
        this.nextQuestion.label = "Skip Question";
        this.question.text = this.currentQuestionNum + ". " 
                             + event.target.data.qtext;
      }
     
      private function netStatusHandler(event:NetStatusEvent) :void
      {
        switch (event.info.code) {
          case "NetConnection.Connect.Failed":
            Alert.show("ERROR: Could not connect to: " + this.server);
            break;
          case "NetConnection.Connect.Success":
            this.prepareStreams();
            break;
          default:
            Alert.show("ERROR: Could not connect to: " + this.server);
            nc.close();
            break;
        }
      }

      private function prepareStreams() :void
      {
        this.nsOutGoing = new NetStream(nc);
       
        this.camera = Camera.getCamera();
        if (this.camera != null) {
          if (this.camera.muted) {
            Security.showSettings(SecurityPanel.DEFAULT);
          }
         
          this.camera.setMode(176, 144, 15);
          this.camera.setKeyFrameInterval(10);
          this.camera.setQuality(0, 70);
         
          this.videoDisplay.attachCamera(camera);
          this.nsOutGoing.attachCamera(camera);
        }
       
        this.mic = Microphone.getMicrophone(0);
        if (this.mic != null) {
          this.mic.rate = 22;
          this.nsOutGoing.attachAudio(mic);
        }   
      }
     
      private function startStopRecord() :void
      {
        if (!recording) {
          this.nsOutGoing.publish(this.userId + "_" + this.currentQuestionNum, 
                                  "record");
          this.recording = true;
          this.startstop.label = "Stop Recording";
          this.nextQuestion.enabled = false;
          this.nextQuestion.label = "Next Question";
        } else {
          this.nsOutGoing.close();
          this.recording = false;
          this.startstop.label = "Start Recording";
          this.nextQuestion.enabled = true;
          this.preview.enabled = true;
          this.preview.source = this.server + this.userId + "_" 
                                + this.currentQuestionNum + ".flv"
          this.preview.play();
        }
      }

      private function nextQuestion_click() :void
      {
        this.startstop.label = "Start Recording";
        this.recording = false;
        this.nsOutGoing.close();
        this.preview.enabled = false;

        this.getNextQuestion();
      }
    ]]>
  </mx:Script>

  <mx:HBox id="banner" width="100%" backgroundColor="#336699"
           horizontalAlign="left" paddingLeft="5" paddingTop="5" 
           paddingBottom="5">
    <mx:Label id="title" text="SurveyReel" color="white" fontSize="24" 
              fontWeight="bold" />
  </mx:HBox>

  <mx:VBox id="content" width="100%" height="100%" backgroundColor="#eeeeee"
           horizontalAlign="center">
    <mx:Label id="question" color="black" 
              fontSize="24" fontWeight="bold" width="800" paddingTop="20" 
              paddingBottom="20" textAlign="center" />

    <mx:HBox id="players">
      <mx:VBox id="recorder" horizontalAlign="center">
        <mx:VideoDisplay id="videoDisplay"
          creationComplete="videoDisplay_creationComplete();"
          width="400" height="300" />

        <mx:HBox id="hbox_RecordControls">
          <mx:Button id="startstop" label="Start Recording" fontSize="16"
                     click="startStopRecord();" />
          <mx:Button id="nextQuestion" label="Skip Question" fontSize="16"
                     click="nextQuestion_click();" />
        </mx:HBox>
      </mx:VBox>

      <mx:VBox id="previewer" horizontalAlign="center">
        <s:VideoPlayer id="preview" width="400" height="300" enabled="false" />
        <mx:Label id="prev" text="Preview" color="black" fontSize="16" />
      </mx:VBox>
    </mx:HBox>
     
  </mx:VBox>
</mx:Application>
