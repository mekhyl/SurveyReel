<?xml version="1.0" encoding="utf-8"?>
<mx:Application name="SurveyReel"
  xmlns:mx="http://www.adobe.com/2006/mxml"
  xmlns:s="library://ns.adobe.com/flex/spark"
  layout="vertical"
  verticalAlign="top"
  horizontalAlign="center"
  backgroundColor="white"
  paddingLeft="0"
  paddingRight="0"
  paddingTop="0"
  paddingBottom="0"
  width="100%"
  height="100%">
 
  <mx:Script>
    <![CDATA[
      import mx.controls.Alert;

      public var nc:NetConnection;
      public var ns:NetStream;
      public var camera:Camera;
      public var mic:Microphone;
      public var nsInComing:NetStream;
      public var nsOutGoing:NetStream;
      public var server:String = "rtmp://192.168.2.6/oflaDemo/test/";
      public var backend:String = "http://192.168.2.6/";
      public var recording:Boolean = false;
      public var currentQuestionNum:int;
      public var surveyId:int;
      public var userId:int;

      private function videoDisplay_creationComplete() :void
      {
        // Fetch survey details.
        this.getSurveyDetails();
      }

      private function startSurvey() :void
      {
        this.question.text = "";
        this.startbox.visible = false;
        this.recorder.visible = true;

        // Fetch the first question.
        this.currentQuestionNum = 0;
        this.getNextQuestion();

        // Setup the NetConnection for streaming.
        this.nc = new NetConnection();
        this.nc.addEventListener(NetStatusEvent.NET_STATUS, 
                                 this.netStatusHandler, false, 0, true);
        this.nc.connect(this.server);
      }

      private function finishSurvey() :void
      {
        this.nsOutGoing.close();

        this.question.text = "";
        this.recorder.visible = false;
        //this.previewer.visible = false;
        this.finished.visible = true;
      }

      private function getSurveyDetails() :void
      {
        var url_part:String = "test"; //FIXME: Read from URL.

        var urlLoader:URLLoader = new URLLoader();
        urlLoader.dataFormat = URLLoaderDataFormat.VARIABLES;
        urlLoader.addEventListener(Event.COMPLETE, this.surveyDetailsReceived);

        var variables:URLVariables = new URLVariables();
        variables.survey_url_part = url_part;

        var req:URLRequest = new URLRequest();
        req.url = this.backend + "getsurvey.php";
        req.method = URLRequestMethod.GET;
        req.data = variables;

        try {
          urlLoader.load(req);
        } catch (error:Error) {
          Alert.show("ERROR: Could not talk to backend at: " + this.backend);
        }
      }

      private function surveyDetailsReceived(event:Event) :void
      {
        this.surveyId = event.target.data.id;
        this.userId = event.target.data.user_id;
        this.surveyTitle.text = event.target.data.title;
        this.surveyDescription.text = event.target.data.description;

        this.startbox.visible = true;
      }

      private function getNextQuestion() :void
      {
        var urlLoader:URLLoader = new URLLoader();
        urlLoader.dataFormat = URLLoaderDataFormat.VARIABLES;
        urlLoader.addEventListener(Event.COMPLETE, this.questionReceived);

        var variables:URLVariables = new URLVariables();
        variables.seq = 1 + this.currentQuestionNum;
        variables.survey_id = this.surveyId;

        var req:URLRequest = new URLRequest();
        req.url = this.backend + "getquestion.php";
        req.method = URLRequestMethod.GET;
        req.data = variables;

        try {
          urlLoader.load(req);
        } catch (error:Error) {
          Alert.show("ERROR: Could not talk to backend at: " + this.backend);
        }
      }

      private function questionReceived(event:Event) :void
      {
        var finished:Boolean = event.target.data.finished;
        if (finished) {
          this.finishSurvey();
        } else {
          this.currentQuestionNum = event.target.data.seq;
          this.question.text = this.currentQuestionNum + ". " 
                               + event.target.data.text;
        }
      }
     
      private function netStatusHandler(event:NetStatusEvent) :void
      {
        switch (event.info.code) {
          case "NetConnection.Connect.Failed":
            Alert.show("ERROR: Could not connect to: " + this.server);
            break;
          case "NetConnection.Connect.Success":
            this.prepareStreams();
            break;
          default:
            Alert.show("ERROR: Could not connect to: " + this.server);
            nc.close();
            break;
        }
      }

      private function prepareStreams() :void
      {
        this.nsOutGoing = new NetStream(nc);
       
        this.camera = Camera.getCamera();
        if (this.camera != null) {
          if (this.camera.muted) {
            Security.showSettings(SecurityPanel.DEFAULT);
          }
         
          this.camera.setMode(400, 300, 15);
          this.camera.setQuality(0, 70);
         
          this.videoDisplay.attachCamera(camera);
          this.nsOutGoing.attachCamera(camera);
        }
       
        this.mic = Microphone.getMicrophone(0);
        if (this.mic != null) {
          this.mic.rate = 22;
          this.nsOutGoing.attachAudio(mic);
        }   
      }
     
      private function startStopRecord() :void
      {
        if (!recording) {
          var filename:String = "user" + this.userId 
                                + "_" + this.currentQuestionNum;
          this.nsOutGoing.publish(filename, "record");
          this.recording = true;
          this.startstop.label = "Stop Recording";
          this.nextQuestion.enabled = false;
          this.reRecord.enabled = false;
        } else {
          this.nsOutGoing.close();
          this.recording = false;
          this.nextQuestion.enabled = true;
          this.reRecord.enabled = true;
          //this.recorder.visible = false;
          //this.previewer.visible = true;
          //this.preview.source = this.server + this.userId + "_" 
          //                      + this.currentQuestionNum + ".flv"
        }
      }

      private function nextQuestion_click(redo:Boolean = false) :void
      {
        this.startstop.label = "Start Recording";
        this.recording = false;
        this.nsOutGoing.close();
        //this.recorder.visible = true;
        //this.previewer.visible = false;
        //this.preview.source = null;

        if (!redo)
          this.getNextQuestion();
      }
    ]]>
  </mx:Script>

  <mx:HBox id="banner" width="100%" backgroundColor="#336699"
           horizontalAlign="left" paddingLeft="5" paddingTop="5" 
           paddingBottom="5" verticalAlign="middle">
    <mx:Label id="title" text="MAYSEVEN" color="white" fontSize="24" 
              fontWeight="bold" paddingRight="15"/>

    <mx:Label id="surveyTitle" text="Title" color="white" fontSize="16" 
              fontWeight="bold" paddingRight="10" />

    <mx:Label id="surveyDescription" text="Description" color="white" 
              fontSize="16" />
  </mx:HBox>

  <mx:VBox id="content" width="100%" height="100%" backgroundColor="#eeeeee"
           horizontalAlign="center">
    <mx:Label id="question" color="black" 
              fontSize="24" fontWeight="bold" width="800" paddingTop="20" 
              paddingBottom="20" textAlign="center" />

    <mx:Canvas id="players">
      <mx:VBox id="startbox" horizontalAlign="center" visible="false" 
               x="0" y="0">
        <mx:Label id="consentTitle" text="Read Carefully Before Starting!" color="black" 
                  fontSize="22" fontWeight="bold" />

        <mx:Text id="consentText" text="When you click 'Agree and Begin', you will first get a dialog box requesting access to your webcam and microphone. Please select 'Accept' and click 'Close' on the dialog AS QUICKLY AS YOU CAN! This is important. There's an annoying bug with the streaming server that requires this workaround. Also, when you click 'Start Recording' on each question, please wait at least 5 complete seconds before starting to speak." color="black" 
                 fontSize="16" width="450" />

        <mx:Button id="startSurveyBtn" label="Agree and Begin" fontSize="16"
                   click="startSurvey();" />
      </mx:VBox>

      <mx:Label id="finished" text="Thank You!" color="black" visible="false" 
                x="0" y="0" fontSize="30" />

      <mx:VBox id="recorder" horizontalAlign="center" visible="false" 
               x="0" y="0">
        <mx:Label id="rec" text="Record your response" color="black" 
                  fontSize="16" />

        <mx:VideoDisplay id="videoDisplay"
          creationComplete="videoDisplay_creationComplete();"
          width="400" height="300" />

        <mx:HBox id="hbox_RecordControls">
          <mx:Button id="startstop" label="Start Recording" fontSize="16"
                     click="startStopRecord();" />
          <mx:Button id="reRecord" label="Cancel and Redo" fontSize="16"
                     click="nextQuestion_click(true);" />
          <mx:Button id="nextQuestion" label="Next Question" fontSize="16"
                     click="nextQuestion_click();" />
        </mx:HBox>
      </mx:VBox>

      <!--
      <mx:VBox id="previewer" horizontalAlign="center" visible="false"
               x="0" y="0">
        <mx:Label id="prev" text="Preview your response" color="black" 
                  fontSize="16" />

        <s:VideoPlayer id="preview" width="400" height="325" autoPlay="false" />

        <mx:HBox id="hbox_PreviewControls">
          <mx:Button id="reRecord" label="Re-Record" fontSize="16"
                     click="nextQuestion_click(true);" />
          <mx:Button id="nextQuestion" label="Next Question" fontSize="16"
                     click="nextQuestion_click();" />
        </mx:HBox>
      </mx:VBox>
      -->

    </mx:Canvas>
     
  </mx:VBox>
</mx:Application>
